"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = exec;
var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/some"));
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));
var _path = _interopRequireDefault(require("path"));
var _support_code_library_builder = _interopRequireDefault(require("@cucumber/cucumber/lib/support_code_library_builder"));
var _suite = require("./parsers/suite");
const options = _support_code_library_builder.default.finalize();
let hasReactDom = false;

/** check if react exists */
try {
  hasReactDom = !!require('react-dom');
} catch (e) {
  //
}
function exec(cwd = '.', featurePath, moduleFileExtensions = []) {
  var _context;
  const act = typeof global['window'] === 'undefined' || !hasReactDom ? async fn => await fn() : require('react-dom/test-utils').act;

  // parse the feature file with given cucumber steps / hooks
  // generating a jasmine-like structure
  const spec = (0, _suite.parseSuite)(cwd, featurePath, moduleFileExtensions, options);
  const fileName = _path.default.basename(featurePath, _path.default.extname(featurePath));
  const hasSomeActiveSuites = (0, _some.default)(_context = spec.suites).call(_context, suite => !suite.skip);
  const shouldSkipSuite = spec.skip || !hasSomeActiveSuites;
  const fn = shouldSkipSuite ? xdescribe || describe.skip : describe;
  fn(`Feature: ${spec.document.name}`, () => {
    var _context2;
    let world;
    beforeAll(async () => {
      world = new options.World({});
      for (let i = 0; i < spec.beforeAll.length; i++) {
        await act(async () => {
          await spec.beforeAll[i].code.apply(world, [spec, fileName]);
        });
      }
    });
    afterAll(async () => {
      for (let i = 0; i < spec.afterAll.length; i++) {
        await act(async () => {
          await spec.afterAll[i].code.apply(world, [spec, fileName]);
        });
      }
      world = null;
    });
    (0, _forEach.default)(_context2 = spec.suites).call(_context2, suite => {
      const fn = suite.skip ? xdescribe || describe.skip : describe;
      fn(`${suite.keyword}: ${suite.name}`, () => {
        beforeAll(async () => {
          for (let i = 0; i < spec.beforeEach.length; i++) {
            await act(async () => {
              await spec.beforeEach[i].code.apply(world, [{
                spec,
                suite: suite
              }, fileName]);
            });
          }
        });
        afterAll(async () => {
          for (let i = 0; i < spec.afterEach.length; i++) {
            await act(async () => {
              await spec.afterEach[i].code.apply(world, [{
                spec,
                suite: suite
              }, fileName]);
            });
          }
        });
        for (let i = 0; i < suite.steps.given.length; i++) {
          it(suite.steps.given[i].keyword + suite.steps.given[i].text, async () => {
            await suite.steps.given[i].code.apply(world, suite.steps.given[i].stepArgs);
          });
        }
        for (let i = 0; i < suite.steps.when.length; i++) {
          it(suite.steps.when[i].description, async () => {
            await suite.steps.when[i].code.apply(world, suite.steps.when[i].stepArgs);
          });
        }
        for (let i = 0; i < suite.steps.then.length; i++) {
          it(suite.steps.then[i].description, async () => {
            await suite.steps.then[i].code.apply(world, suite.steps.then[i].stepArgs);
          });
        }
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,