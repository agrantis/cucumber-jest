"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSnippet = generateSnippet;
exports.parseSteps = parseSteps;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));
var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));
var _data_table = _interopRequireDefault(require("@cucumber/cucumber/lib/models/data_table"));
var _chalk = _interopRequireDefault(require("chalk"));
var _outdent = require("outdent");
var _space = require("../configs/space");
var _isJson = require("../utils/isJson");
var _table = require("./table");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context6, _context7; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context6 = ownKeys(Object(source), !0)).call(_context6, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function generateSnippet(step) {
  var _context;
  return (0, _outdent.outdent)`
        ${_chalk.default.red('[error]')} could not find a step with pattern that matches the text:\n		
        ${_chalk.default.yellow(step.text)}\n
        Implement with the following snippet:\n
        ${(0, _trim.default)(_context = step.keyword).call(_context)}("${step.text}", function () {
            // Write code here
        });
        \n
    `;
}
function parseSteps(steps, definitions) {
  const _fn = (acc, step) => {
    var _context2, _definition$expressio, _definition$expressio2, _definition$expressio3, _context3, _context4, _context5;
    let _result2;
    for (let _key2 = 0, _length2 = definitions.length, _value2; _key2 < _length2; ++_key2) {
      _value2 = definitions[_key2];
      if (_value2.matchesStepName(step.text)) {
        _result2 = _value2;
        break;
      }
    }
    const definition = _result2;
    let _result3 = [];
    for (let _key3 = 0, _length3 = definitions.length, _value3; _key3 < _length3; ++_key3) {
      _value3 = definitions[_key3];
      if (_value3.matchesStepName(step.text)) _result3.push(_value3);
    }
    const multiSteps = _result3;
    if (!definition) {
      throw new Error(generateSnippet(step));
    }
    if (multiSteps.length > 1) {
      process.stdout.write(`${_chalk.default.yellow('Warning:')}\nmultiple steps found\nstep:${_chalk.default.yellow(step.text)}\npatterns:\n${(0, _map.default)(multiSteps).call(multiSteps, step => `- ${step.pattern.toString()}`).join('\n')}\n`);
    }
    const stepArgs = (0, _concat.default)(_context2 = []).call(_context2, (0, _toConsumableArray2.default)((_definition$expressio = (_definition$expressio2 = definition.expression) === null || _definition$expressio2 === void 0 ? void 0 : (_definition$expressio3 = _definition$expressio2.match(step.text)) === null || _definition$expressio3 === void 0 ? void 0 : (0, _map.default)(_definition$expressio3).call(_definition$expressio3, arg => arg.getValue())) !== null && _definition$expressio !== void 0 ? _definition$expressio : []), (0, _toConsumableArray2.default)(step.dataTable ? [new _data_table.default(step.dataTable)] : []), (0, _toConsumableArray2.default)(step.docString ? [(0, _isJson.isJson)(step.docString.content) ? JSON.parse(step.docString.content) : step.docString.content] : []));
    const type = (0, _trim.default)(_context3 = step.keyword || '').call(_context3).toLowerCase();
    if (acc.last !== type && type !== 'and' && type !== 'but') {
      acc.last = type;
    }
    const tableDescription = step.dataTable ? '\n' + (0, _table.createDataTable)(stepArgs[stepArgs.length - 1].rawTable) : '';
    const docStringDescription = step.docString ? '\n' + (0, _map.default)(_context4 = step.docString.content.split('\n')).call(_context4, row => _space.space + `${row}`).join('\n') : '';
    return _objectSpread(_objectSpread({}, acc), {}, {
      [acc.last]: (0, _concat.default)(_context5 = []).call(_context5, (0, _toConsumableArray2.default)(acc[acc.last] || []), [_objectSpread(_objectSpread({
        description: `${step.keyword}${step.text}${tableDescription}${docStringDescription}`
      }, step), {}, {
        code: definition.code,
        stepArgs
      })])
    });
  };
  let _result = {
    last: 'given',
    given: [],
    when: [],
    then: []
  };
  for (let _key = 0, _length = steps.length, _value; _key < _length; ++_key) {
    _value = steps[_key];
    _result = _fn(_result, _value, _key, steps);
  }
  return _result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,