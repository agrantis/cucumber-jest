"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataTable = createDataTable;
exports.generateExampleTableSteps = generateExampleTableSteps;
exports.parseExampleTable = parseExampleTable;
exports.parseVariables = parseVariables;
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));
var _asciiTable = _interopRequireDefault(require("ascii-table"));
var _space = require("../configs/space");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context6, _context7; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? _forEachInstanceProperty(_context6 = ownKeys(Object(source), !0)).call(_context6, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }
function createDataTable(rows) {
  const table = new _asciiTable.default();
  table.setHeading.apply(table, (0, _toConsumableArray2.default)(rows[0]));
  for (let i = 1; i < rows.length; i++) {
    table.addRow.apply(table, (0, _toConsumableArray2.default)(rows[i]));
  }
  const _iterable = table.toString().split('\n');
  let _result = [];
  for (let _key = 0, _length = _iterable.length, _value; _key < _length; ++_key) {
    _value = _iterable[_key];
    _result[_key] = _space.space + _value;
  }
  return _result.join('\n');
}
function generateExampleTableSteps(examples, scenario) {
  let _result2 = [];
  for (let _key2 = 0, _length2 = examples.length, _value2; _key2 < _length2; ++_key2) {
    var _context;
    _value2 = examples[_key2];
    const _iterable3 = scenario.steps;
    let _result3 = [];
    for (let _key3 = 0, _length3 = _iterable3.length, _value3; _key3 < _length3; ++_key3) {
      _value3 = _iterable3[_key3];
      _result3[_key3] = _objectSpread(_objectSpread(_objectSpread({}, _value3), _value3.docString ? {
        docString: _objectSpread(_objectSpread({}, _value3.docString), {}, {
          content: parseVariables(_value2, _value3.docString.content)
        })
      } : {}), {}, {
        text: parseVariables(_value2, _value3.text)
      });
    }
    _result2 = (0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(_result2), [_objectSpread(_objectSpread({}, scenario), {}, {
      name: parseVariables(_value2, scenario.name),
      steps: _result3
    })]);
  }
  return _result2;
}
function parseExampleTable(examples) {
  const _iterable4 = examples || [];
  let _result4 = [];
  for (let _key4 = 0, _length4 = _iterable4.length, _value4; _key4 < _length4; ++_key4) {
    var _context4;
    _value4 = _iterable4[_key4];
    const _iterable5 = _value4.tableHeader.cells;
    let _result5 = [];
    for (let _key5 = 0, _length5 = _iterable5.length, _value5; _key5 < _length5; ++_key5) {
      var _context2;
      _value5 = _iterable5[_key5];
      _result5 = (0, _concat.default)(_context2 = []).call(_context2, (0, _toConsumableArray2.default)(_result5), [_value5.value]);
    }
    const _keys = _result5;
    const _iterable6 = _value4.tableBody;
    let _result6 = [];
    for (let _key6 = 0, _length6 = _iterable6.length, _value6; _key6 < _length6; ++_key6) {
      var _context3;
      _value6 = _iterable6[_key6];
      _result6 = (0, _concat.default)(_context3 = []).call(_context3, (0, _toConsumableArray2.default)(_result6), [parseExampleTableKeyAndValues(_keys, _value6)]);
    }
    _result4 = (0, _concat.default)(_context4 = []).call(_context4, (0, _toConsumableArray2.default)(_result4), (0, _toConsumableArray2.default)(_result6));
  }
  return _result4;
}
function parseExampleTableKeyAndValues(keys, row) {
  let _result7 = [];
  for (let _key7 = 0, _length7 = keys.length, _value7; _key7 < _length7; ++_key7) {
    var _context5;
    _value7 = keys[_key7];
    _result7 = (0, _concat.default)(_context5 = []).call(_context5, (0, _toConsumableArray2.default)(_result7), [{
      key: _value7,
      value: row.cells[_key7].value
    }]);
  }
  return _result7;
}
function parseVariables(example, text) {
  let _result8 = text + '';
  for (let _key8 = 0, _length8 = example.length, _value8; _key8 < _length8; ++_key8) {
    _value8 = example[_key8];
    _result8 = _result8.replace(new RegExp(`<${_value8.key}>`), _value8.value);
  }
  return _result8;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXNjaWlUYWJsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3NwYWNlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIl9PYmplY3Qka2V5cyIsIl9PYmplY3QkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsIl9maWx0ZXJJbnN0YW5jZVByb3BlcnR5IiwiY2FsbCIsInN5bSIsIl9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiX2NvbnRleHQ2IiwiX2NvbnRleHQ3Iiwic291cmNlIiwiX2ZvckVhY2hJbnN0YW5jZVByb3BlcnR5IiwiT2JqZWN0Iiwia2V5IiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfT2JqZWN0JGRlZmluZVByb3BlcnRpZXMiLCJfT2JqZWN0JGRlZmluZVByb3BlcnR5IiwiY3JlYXRlRGF0YVRhYmxlIiwicm93cyIsInRhYmxlIiwiQXNjaWlUYWJsZSIsInNldEhlYWRpbmciLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiYWRkUm93IiwiX2l0ZXJhYmxlIiwidG9TdHJpbmciLCJzcGxpdCIsIl9yZXN1bHQiLCJfa2V5IiwiX2xlbmd0aCIsIl92YWx1ZSIsInNwYWNlIiwicm93Iiwiam9pbiIsImdlbmVyYXRlRXhhbXBsZVRhYmxlU3RlcHMiLCJleGFtcGxlcyIsInNjZW5hcmlvIiwiX3Jlc3VsdDIiLCJfa2V5MiIsIl9sZW5ndGgyIiwiX3ZhbHVlMiIsIl9jb250ZXh0IiwiX2l0ZXJhYmxlMyIsInN0ZXBzIiwiX3Jlc3VsdDMiLCJfa2V5MyIsIl9sZW5ndGgzIiwiX3ZhbHVlMyIsInN0ZXAiLCJkb2NTdHJpbmciLCJjb250ZW50IiwicGFyc2VWYXJpYWJsZXMiLCJleGFtcGxlIiwidGV4dCIsIl9jb25jYXQiLCJhY2MiLCJuYW1lIiwicGFyc2VFeGFtcGxlVGFibGUiLCJfaXRlcmFibGU0IiwiX3Jlc3VsdDQiLCJfa2V5NCIsIl9sZW5ndGg0IiwiX3ZhbHVlNCIsIl9jb250ZXh0NCIsIl9pdGVyYWJsZTUiLCJ0YWJsZUhlYWRlciIsImNlbGxzIiwiX3Jlc3VsdDUiLCJfa2V5NSIsIl9sZW5ndGg1IiwiX3ZhbHVlNSIsIl9jb250ZXh0MiIsImNlbGwiLCJ2YWx1ZSIsIl9pdGVyYWJsZTYiLCJ0YWJsZUJvZHkiLCJfcmVzdWx0NiIsIl9rZXk2IiwiX2xlbmd0aDYiLCJfdmFsdWU2IiwiX2NvbnRleHQzIiwicGFyc2VFeGFtcGxlVGFibGVLZXlBbmRWYWx1ZXMiLCJfcmVzdWx0NyIsIl9rZXk3IiwiX2xlbmd0aDciLCJfdmFsdWU3IiwiX2NvbnRleHQ1IiwiX3Jlc3VsdDgiLCJfa2V5OCIsIl9sZW5ndGg4IiwiX3ZhbHVlOCIsInJlcGxhY2UiLCJSZWdFeHAiLCJ2YXJpYWJsZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXJzL3RhYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc2NpaVRhYmxlIGZyb20gJ2FzY2lpLXRhYmxlJztcbmltcG9ydCB7bWFwLCByZWR1Y2V9IGZyb20gJ2lubGluZS1sb29wcy5tYWNybyc7XG5cbmltcG9ydCB7c3BhY2V9IGZyb20gJy4uL2NvbmZpZ3Mvc3BhY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGF0YVRhYmxlKHJvd3MpIHtcbiAgICBjb25zdCB0YWJsZSA9IG5ldyBBc2NpaVRhYmxlKCk7XG5cbiAgICB0YWJsZS5zZXRIZWFkaW5nKC4uLnJvd3NbMF0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRhYmxlLmFkZFJvdyguLi5yb3dzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwKHRhYmxlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpLCAocm93KSA9PiBzcGFjZSArIHJvdykuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUV4YW1wbGVUYWJsZVN0ZXBzKGV4YW1wbGVzLCBzY2VuYXJpbykge1xuICAgIHJldHVybiByZWR1Y2UoXG4gICAgICAgIGV4YW1wbGVzLFxuICAgICAgICAoYWNjLCBleGFtcGxlKSA9PiBbXG4gICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLi4uc2NlbmFyaW8sXG4gICAgICAgICAgICAgICAgbmFtZTogcGFyc2VWYXJpYWJsZXMoZXhhbXBsZSwgc2NlbmFyaW8ubmFtZSksXG4gICAgICAgICAgICAgICAgc3RlcHM6IG1hcChzY2VuYXJpby5zdGVwcywgKHN0ZXApID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLnN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIC4uLihzdGVwLmRvY1N0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NTdHJpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdGVwLmRvY1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBwYXJzZVZhcmlhYmxlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcC5kb2NTdHJpbmcuY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHBhcnNlVmFyaWFibGVzKGV4YW1wbGUsIHN0ZXAudGV4dClcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgW11cbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeGFtcGxlVGFibGUoZXhhbXBsZXMpIHtcbiAgICByZXR1cm4gcmVkdWNlKFxuICAgICAgICBleGFtcGxlcyB8fCBbXSxcbiAgICAgICAgKGFjYywgZXhhbXBsZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IHJlZHVjZShcbiAgICAgICAgICAgICAgICBleGFtcGxlLnRhYmxlSGVhZGVyLmNlbGxzLFxuICAgICAgICAgICAgICAgIChhY2MsIGNlbGwpID0+IFsuLi5hY2MsIGNlbGwudmFsdWVdLFxuICAgICAgICAgICAgICAgIFtdXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAuLi5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgIGV4YW1wbGUudGFibGVCb2R5LFxuICAgICAgICAgICAgICAgICAgICAoYWNjLCByb3cpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRXhhbXBsZVRhYmxlS2V5QW5kVmFsdWVzKGtleXMsIHJvdylcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuICAgICAgICBbXVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRXhhbXBsZVRhYmxlS2V5QW5kVmFsdWVzKGtleXMsIHJvdykge1xuICAgIHJldHVybiByZWR1Y2UoXG4gICAgICAgIGtleXMsXG4gICAgICAgIChhY2MsIGtleSwgaSkgPT4gW1xuICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcm93LmNlbGxzW2ldLnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFtdXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVmFyaWFibGVzKGV4YW1wbGUsIHRleHQpIHtcbiAgICByZXR1cm4gcmVkdWNlKFxuICAgICAgICBleGFtcGxlLFxuICAgICAgICAoYWNjLCB2YXJpYWJsZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjYy5yZXBsYWNlKG5ldyBSZWdFeHAoYDwke3ZhcmlhYmxlLmtleX0+YCksIHZhcmlhYmxlLnZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dCArICcnXG4gICAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsV0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQXVDLFNBQUFFLFFBQUFDLE1BQUEsRUFBQUMsY0FBQSxRQUFBQyxJQUFBLEdBQUFDLFlBQUEsQ0FBQUgsTUFBQSxPQUFBSSw2QkFBQSxRQUFBQyxPQUFBLEdBQUFELDZCQUFBLENBQUFKLE1BQUEsR0FBQUMsY0FBQSxLQUFBSSxPQUFBLEdBQUFDLHVCQUFBLENBQUFELE9BQUEsRUFBQUUsSUFBQSxDQUFBRixPQUFBLFlBQUFHLEdBQUEsV0FBQUMsZ0NBQUEsQ0FBQVQsTUFBQSxFQUFBUSxHQUFBLEVBQUFFLFVBQUEsT0FBQVIsSUFBQSxDQUFBUyxJQUFBLENBQUFDLEtBQUEsQ0FBQVYsSUFBQSxFQUFBRyxPQUFBLFlBQUFILElBQUE7QUFBQSxTQUFBVyxjQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxTQUFBLEVBQUFDLFNBQUEsTUFBQUMsTUFBQSxXQUFBSixT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