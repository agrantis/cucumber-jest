"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));
var _crypto = _interopRequireDefault(require("crypto"));
var _core = require("@babel/core");
var _babelPresetJest = _interopRequireDefault(require("babel-preset-jest"));
var _default = {
  canInstrument: false,
  getCacheKey: (fileData, filename, {
    configString
  }, instrument) => _crypto.default.createHash('md5').update('\0', 'utf8').update(fileData).update('\0', 'utf8').update(filename).update('\0', 'utf8').update(configString).update('\0', 'utf8').update('\0', 'utf8').update(instrument ? 'instrument' : '').digest('hex'),
  process(src, filePath, jestConfig) {
    const extensions = (0, _stringify.default)(jestConfig.moduleFileExtensions);
    const testFile = `
            const exec = require('cucumber-jest/dist/exec').exec;            
            exec('${jestConfig.cwd}', '${filePath}', ${extensions})
        `;
    const featureFile = (0, _core.transform)(testFile, {
      filename: filePath,
      presets: [_babelPresetJest.default],
      root: jestConfig.cwd
    });
    return featureFile ? featureFile : {
      code: src
    };
  }
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3J5cHRvIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29yZSIsIl9iYWJlbFByZXNldEplc3QiLCJfZGVmYXVsdCIsImNhbkluc3RydW1lbnQiLCJnZXRDYWNoZUtleSIsImZpbGVEYXRhIiwiZmlsZW5hbWUiLCJjb25maWdTdHJpbmciLCJpbnN0cnVtZW50IiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsInByb2Nlc3MiLCJzcmMiLCJmaWxlUGF0aCIsImplc3RDb25maWciLCJleHRlbnNpb25zIiwiX3N0cmluZ2lmeSIsImRlZmF1bHQiLCJtb2R1bGVGaWxlRXh0ZW5zaW9ucyIsInRlc3RGaWxlIiwiY3dkIiwiZmVhdHVyZUZpbGUiLCJ0cmFuc2Zvcm0iLCJwcmVzZXRzIiwiamVzdFByZXNldCIsInJvb3QiLCJjb2RlIiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmltcG9ydCB7dHJhbnNmb3JtfSBmcm9tICdAYmFiZWwvY29yZSc7XG5pbXBvcnQgdHlwZSB7Q29uZmlnfSBmcm9tICdAamVzdC90eXBlcyc7XG5pbXBvcnQgamVzdFByZXNldCBmcm9tICdiYWJlbC1wcmVzZXQtamVzdCc7XG5cbmV4cG9ydCB0eXBlIHtTcGVjfSBmcm9tICcuL3BhcnNlcnMvc3VpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY2FuSW5zdHJ1bWVudDogZmFsc2UsXG4gICAgZ2V0Q2FjaGVLZXk6IChmaWxlRGF0YSwgZmlsZW5hbWUsIHtjb25maWdTdHJpbmd9LCBpbnN0cnVtZW50KSA9PlxuICAgICAgICBjcnlwdG9cbiAgICAgICAgICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgICAgICAgLnVwZGF0ZSgnXFwwJywgJ3V0ZjgnKVxuICAgICAgICAgICAgLnVwZGF0ZShmaWxlRGF0YSlcbiAgICAgICAgICAgIC51cGRhdGUoJ1xcMCcsICd1dGY4JylcbiAgICAgICAgICAgIC51cGRhdGUoZmlsZW5hbWUpXG4gICAgICAgICAgICAudXBkYXRlKCdcXDAnLCAndXRmOCcpXG4gICAgICAgICAgICAudXBkYXRlKGNvbmZpZ1N0cmluZylcbiAgICAgICAgICAgIC51cGRhdGUoJ1xcMCcsICd1dGY4JylcbiAgICAgICAgICAgIC51cGRhdGUoJ1xcMCcsICd1dGY4JylcbiAgICAgICAgICAgIC51cGRhdGUoaW5zdHJ1bWVudCA/ICdpbnN0cnVtZW50JyA6ICcnKVxuICAgICAgICAgICAgLmRpZ2VzdCgnaGV4JyksXG4gICAgcHJvY2VzcyhcbiAgICAgICAgc3JjOiBzdHJpbmcsXG4gICAgICAgIGZpbGVQYXRoOiBDb25maWcuUGF0aCxcbiAgICAgICAgamVzdENvbmZpZzogQ29uZmlnLlByb2plY3RDb25maWdcbiAgICApIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IEpTT04uc3RyaW5naWZ5KGplc3RDb25maWcubW9kdWxlRmlsZUV4dGVuc2lvbnMpO1xuXG4gICAgICAgIGNvbnN0IHRlc3RGaWxlID0gYFxuICAgICAgICAgICAgY29uc3QgZXhlYyA9IHJlcXVpcmUoJ2N1Y3VtYmVyLWplc3QvZGlzdC9leGVjJykuZXhlYzsgICAgICAgICAgICBcbiAgICAgICAgICAgIGV4ZWMoJyR7amVzdENvbmZpZy5jd2R9JywgJyR7ZmlsZVBhdGh9JywgJHtleHRlbnNpb25zfSlcbiAgICAgICAgYDtcblxuICAgICAgICBjb25zdCBmZWF0dXJlRmlsZSA9IHRyYW5zZm9ybSh0ZXN0RmlsZSwge1xuICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVQYXRoLFxuICAgICAgICAgICAgcHJlc2V0czogW2plc3RQcmVzZXRdLFxuICAgICAgICAgICAgcm9vdDogamVzdENvbmZpZy5jd2RcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZlYXR1cmVGaWxlID8gZmVhdHVyZUZpbGUgOiB7Y29kZTogc3JjfTtcbiAgICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxnQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTJDLElBQUFHLFFBQUEsR0FJNUI7RUFDWEMsYUFBYSxFQUFFLEtBQUs7RUFDcEJDLFdBQVcsRUFBRUEsQ0FBQ0MsUUFBUSxFQUFFQyxRQUFRLEVBQUU7SUFBQ0M7RUFBWSxDQUFDLEVBQUVDLFVBQVUsS0FDeERDLGVBQU0sQ0FDREMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUNqQkMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FDcEJBLE1BQU0sQ0FBQ04sUUFBUSxDQUFDLENBQ2hCTSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUNwQkEsTUFBTSxDQUFDTCxRQUFRLENBQUMsQ0FDaEJLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQ3BCQSxNQUFNLENBQUNKLFlBQVksQ0FBQyxDQUNwQkksTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FDcEJBLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQ3BCQSxNQUFNLENBQUNILFVBQVUsR0FBRyxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQ3RDSSxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQ3RCQyxPQUFPQSxDQUNIQyxHQUFXLEVBQ1hDLFFBQXFCLEVBQ3JCQyxVQUFnQyxFQUNsQztJQUNFLE1BQU1DLFVBQVUsR0FBRyxJQUFBQyxVQUFBLENBQUFDLE9BQUEsRUFBZUgsVUFBVSxDQUFDSSxvQkFBb0IsQ0FBQztJQUVsRSxNQUFNQyxRQUFRLEdBQUk7QUFDMUI7QUFDQSxvQkFBb0JMLFVBQVUsQ0FBQ00sR0FBSSxPQUFNUCxRQUFTLE1BQUtFLFVBQVc7QUFDbEUsU0FBUztJQUVELE1BQU1NLFdBQVcsR0FBRyxJQUFBQyxlQUFTLEVBQUNILFFBQVEsRUFBRTtNQUNwQ2YsUUFBUSxFQUFFUyxRQUFRO01BQ2xCVSxPQUFPLEVBQUUsQ0FBQ0Msd0JBQVUsQ0FBQztNQUNyQkMsSUFBSSxFQUFFWCxVQUFVLENBQUNNO0lBQ3JCLENBQUMsQ0FBQztJQUVGLE9BQU9DLFdBQVcsR0FBR0EsV0FBVyxHQUFHO01BQUNLLElBQUksRUFBRWQ7SUFBRyxDQUFDO0VBQ2xEO0FBQ0osQ0FBQztBQUFBZSxPQUFBLENBQUFWLE9BQUEsR0FBQWpCLFFBQUE7QUFBQTRCLE1BQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBLENBQUFWLE9BQUEifQ==